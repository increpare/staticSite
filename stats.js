#! /usr/bin/env node

var fs = require('fs')
var path = require('path')
var RSS = require('rss')

var minify = require('html-minifier').minify;
var minifyOptions =  {
caseSensitive:true,
collapseBooleanAttributes:true,
collapseInlineTagWhitespace:true,
collapseWhitespace:true,
conservativeCollapse:true,
// customAttrAssign:true,
// customAttrCollapse:true,
// customAttrSurround:true,
// customEventAttributes:true,
decodeEntities:true,
html5:true,
// ignoreCustomComments:true,
// ignoreCustomFragments:true,
includeAutoGeneratedTags:true,
keepClosingSlash:true,
// maxLineLength:true,
minifyCSS:true,
minifyJS:true,
minifyURLs:true,
// preserveLineBreaks:true,
preventAttributesEscaping:true,
processConditionalComments:true,
processScripts:true,
quoteCharacter:true,
removeAttributeQuotes:true,
removeComments:true,
removeEmptyAttributes:true,
removeEmptyElements:true,
removeOptionalTags:true,
removeRedundantAttributes:true,
removeScriptTypeAttributes:true,
removeStyleLinkTypeAttributes:true,
// removeTagWhitespace:true,
sortAttributes:true,
sortClassName:true,
// trimCustomFragments:true,
useShortDoctype:true,
}

//for debug
// minifyOptions={}

// STEP 1 : generate folders

var exec = require('child_process').execSync
var execAsync = require('child_process').exec


// STEP 2 : read in CSV

function removeOuterQuotes(s){
	s=s.trim();
	if (s[0]==='"' && s[s.length-1]==='"') {
		s = s.substring(1, s.length-1);
		s = s.replace(/""/g,'"');
	}
	return s;
}
function htmlToMarkdown(s_html){
	s_html = s_html.replace(/\n\n/gi,'<p><p>\n');
	var TurndownService = require('turndown')
	var turndownService = new TurndownService()
	var markdown = turndownService.turndown(s_html);
	return markdown;
}

var content = fs.readFileSync('database/table.csv','utf8')

var postTemplate = '`'+fs.readFileSync('templates/post.txt')+'`';
var indexTemplate = '`'+fs.readFileSync('templates/index.txt')+'`';
var rows =  content.split("\r")

var table = rows.map( r => r.split(";").map( s => s.trim().replace(/Â±/gi,';')).map( s => removeOuterQuotes(s) )  )

table.shift();

var pageNames=[];

// STEP 3 : generate sub files
for (var i=0;i<table.length;i++){
	var r = table[i]
	var title = r[0]

	var niceDate=r[1]
	r[1] = r[1].replace(/"/gi,'-').replace(/\//gi,'-').trim()
	var date = r[1]

	var icon = r[2]

	var caption = r[3]
	var desc = r[4]
	var html = r[5]
	var mac = r[6]
	var win = r[7]
	var linux = r[8]
	var src = r[9]
	var src_desc = r[10]
	var flash = r[11]
	var zip = r[12]
	var unity = r[13]

	var datesplit = date.split('-')
	var datenum = parseInt(datesplit[0])*10000+parseInt(datesplit[1])*100+parseInt(datesplit[2]);
	r.push(datenum); [14]

	var safeName = title.replace(/[ ]/g,'-').replace(/[^a-zA-Z0-9-_\.]/g,'')
	var pageName = safeName+".html";

	if (pageNames.indexOf(pageName)>=0){
		var c = 2;	
		while (pageNames.indexOf(pageName)>=0){
			pageName = safeName+"_"+c+".html";
			c++;
		}
	}
	pageNames.push(pageName);


	if (icon==""){

		icon = date+"-"+safeName+".png";
		r[2] = icon
	} else {
		// -interpolate Nearest -filter point
	}

	bodyMarkdown = htmlToMarkdown(desc)

	captionMarkdown = htmlToMarkdown(caption)


	r.push(pageName)//[15]
	r.push(niceDate)//[16]

	//var pageMinified=minify(page,minifyOptions)

}


/* make index */

function sortByDate(a,b){
  if( a[14] > b[14]){
      return -1;
  }else if( a[14] < b[14] ){
      return 1;
  }
  return 0;
}

table.sort(sortByDate)





for (var i=0;i<table.length;i++){
	var r = table[i];

	var title = r[0]
	var date = r[1]
	var icon = r[2]
	var caption = r[3]
	var desc = r[4]
	var html = r[5]
	var mac = r[6]
	var win = r[7]
	var linux = r[8]
	var src = r[9]
	var src_desc = r[10]
	var flash = r[11]
	var zip = r[12]
	var unity = r[13]
	var datenum = r[14]
	var pageName = r[15]
	var niceDate = r[16]

	var splitDate = niceDate.split('/');
	var year = splitDate[0];
	var month = splitDate[1];
	var day = splitDate[2];
	var date = new Date(year,month-1,day)
	r[17]=date;

}


for (var y=2008;y<2019;y++){
	var entries = table.filter( row => row[17].getFullYear()==y);
	var total = entries.length;
	var count_html = entries.filter( row => row[5]!="" ).length/total;
	var count_mac = entries.filter( row => row[6]!="" ).length/total;
	var count_windows = entries.filter( row => row[7]!="" ).length/total;
	var count_linux = entries.filter( row => row[8]!="" ).length/total;
	var count_flash = entries.filter( row => row[11]!="" ).length/total;

	console.log(`${y}\t${count_windows}\t${count_mac}\t${count_linux}\t${count_flash}\t${count_html}`)
}

// for (var y=2008;y<2019;y++){
// 	for (var m=0;m<12;m+=3){
// 		var entries = table.filter( row => row[17].getFullYear()==y && (row[17].getMonth()==m||row[17].getMonth()==m+1||row[17].getMonth()==m+2));
// 		var total = entries.length;
// 		var count_html = entries.filter( row => row[5]!="" ).length/total;
// 		var count_mac = entries.filter( row => row[6]!="" ).length/total;
// 		var count_windows = entries.filter( row => row[7]!="" ).length/total;
// 		var count_linux = entries.filter( row => row[8]!="" ).length/total;
// 		var count_flash = entries.filter( row => row[11]!="" ).length/total;

// 		var yd="";
// 		if (m==0){
// 			yd=y;
// 		}
// 		console.log(`${yd}\t${entries.length}`)
// 	}
// }